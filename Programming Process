What is the process of programming?
Here are some reasons for writing Python code:

For fun
To automate some part of your job
To analyze data
To work on a team to build a large-scale app for your company
Whatever your reason, you follow similar steps.

In this unit, you'll look at the process of programming and the tools you need to create your first Python programs.

What is the process of programming?
Why do software developers write code in the first place? They typically act to address a need or problem that requires a solution.

As you start, your need could be an assignment or coding challenge for a course. Later, your need will likely come as a business problem to automate.

Building a new program follows a predictable series of actions:

Analyze requirements: The first step is to understand the problem you're trying to solve. How you begin depends on whether you're building the program to satisfy a teacher, a client, or yourself. You typically want to immerse yourself in the problem. You ask critical questions about what the problem is, read any available communication or notes, and take other actions.
Design a solution: Next, you begin to think about considerations like the program's appearance, its functionality, and what happens when an unexpected problem arises. You might draw diagrams, take notes, or mentally visualize the design of the program. You also might begin to imagine the approach you'll take for certain challenges in your code.
Write your code: You spend the most time writing code that realizes the design you created.
Test your code: As you write code, you test to see if the code works correctly. Later, you might add more formal testing that even involves users.
Deploy your code: You distribute your code to others so they can begin using it to solve their problems. Or in a classroom, you might send your code to an instructor, which is a form of deployment.
Maintain your code: Over time, users of your program might ask for new features or report bugs in your program. You fix the problems and redistribute your code to your users.
You might be your program's only user. Or you might work in a large team and distribute your program to thousands of users. In either case, the basic process is the same. Writing code is important, but it's not the only step, even when you solve coding challenges or assignments for a class.

Most tutorials and classes usually focus on writing code. They focus on coding probably because it's both the hardest step and the most fun. It's also the activity that requires deep knowledge to complete. This step has its own process:

Focus on some small part of the larger problem.
Write code to implement that small part.
Run the program and watch it work. If it works incorrectly, figure out why.
Rewrite the code to fix any problems.
Keep repeating this process until you're done.
The final step, which is often called iterating, is popular in software development. You usually write just a few lines of code before you run the program. This way, you see if the code actually does what you want and where the code went wrong.

Fixing a problem in your code is as easy as typing or editing a document. It's like driving a car, where you make a thousand small course corrections until you get to your destination. Code fixing might seem scary at first. But compared to people like pilots, surgeons, and construction workers, software developers can make many mistakes and still be good at what they do.

What programming tools should I use?
You need a Python compiler, interpreter, and editor. You could use a basic text editor like Notepad on Windows or Vim on macOS or Linux. But you'd have a better experience with a dedicated code editor.

Here are the tools to use as you get started:

Python: The Python installer contains many utilities and features. The most important are:

The Python runtime, which is the compiler and the interpreter.
The Python Standard Library, which is a large collection of code that implements common functionality so you don't have to. Later, we'll devote entire modules to exploring this code library.
Visual Studio Code: You can use a basic text editor to write code. But a dedicated code editor like Visual Studio Code lets you manage your code files, provides helpful visual hints as you code, and much more.

Python extension for Visual Studio Code: The Python extension enhances the default Visual Studio Code experience by customizing the editor to help you write Python.

Collectively, these software tools are typically referred to as your developer environment. In the next module, you'll walk through the steps to install the software tools you need to start programming with Python.
